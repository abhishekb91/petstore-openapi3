openapi: 3.0.1
info:
  title: Petstore
  description: 'This is a simple Petstore server. The main objective of this is to use create a working openapi 3 implementation in golang'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
- name: pet
  description: Everything about your Pets
paths:
  /pet:
    get:
      tags:
      - pet
      summary: Return all pets in the store
      operationId: getPets
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - pet
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /pet/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetById
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Pet object to update in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: Pet deleted
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      required:
      - message
      - code
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
    Pet:
      allOf:
        - $ref: '#/components/schemas/PetRequest'
        - required:
          - id
          properties:
            id:
              type: integer
              format: int64
              description: Unique id of the pet
    PetRequest:
      required:
        - name
      properties:
        name:
          type: string
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold