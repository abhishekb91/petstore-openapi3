// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return all pets in the store
	// (GET /pet)
	GetPets(ctx echo.Context) error
	// Add a new pet to the store
	// (POST /pet)
	AddPet(ctx echo.Context) error
	// Deletes a pet
	// (DELETE /pet/{petId})
	DeletePet(ctx echo.Context, petId int64) error
	// Find pet by ID
	// (GET /pet/{petId})
	GetPetById(ctx echo.Context, petId int64) error
	// Updates a pet in the store with form data
	// (PUT /pet/{petId})
	UpdatePetById(ctx echo.Context, petId int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPets converts echo context to params.
func (w *ServerInterfaceWrapper) GetPets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPets(ctx)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, ctx.Param("petId"), &petId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter petId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, petId)
	return err
}

// GetPetById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, ctx.Param("petId"), &petId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter petId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPetById(ctx, petId)
	return err
}

// UpdatePetById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, ctx.Param("petId"), &petId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter petId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePetById(ctx, petId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pet", wrapper.GetPets)
	router.POST(baseURL+"/pet", wrapper.AddPet)
	router.DELETE(baseURL+"/pet/:petId", wrapper.DeletePet)
	router.GET(baseURL+"/pet/:petId", wrapper.GetPetById)
	router.PUT(baseURL+"/pet/:petId", wrapper.UpdatePetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTY/bNhD9K8S0R63k3QQ96LbpbgsDRWukySnwgRbHElOK5JIju8ZC/70YUt4Py80i",
	"QNq0yGWtpcjhm/fezOgeGtd7Z9FShPoeYtNhL9PjbQgu8IMPzmMgjWm5cQr5d+tCLwlq0JZ+eA0F0MFj",
	"/hdbDDAW0GOMsk27p5eRgrYtjGMBAe8GHVBB/eFhY5Gjrx+Cuc1HbIhjrZA4jjTmty3UH+7h+4BbqOG7",
	"6jGBakJfrZDe4t2AkY+eJqAV/1UYm6A9aWehhvdW3w0otBJuK6hD4ZGgeDnHkzy0gvW4zmiPAGYEWtmf",
	"o6SASJKGOAfnkUR+J7RN6CK5wGyhHXq+V+6kNnJjeM2jVRywgOiMesLl33Cf4KxHXtZ26+bXv+t0FDoK",
	"KaLuvUGxQkoARMSww1CKdx2KXmorslx6h5nGfI6cGCKKJqAkFFLsXfhD21Y4j1Z6LV6JFLZHS5Kv5CRb",
	"Z2TKwegGbcRH3uDay6ZDcVUuoIAhGKihI/J1Ve33+1Kmt6ULbTUdjdUvyx9vf/399uKqXJQd9Ya5Jk2G",
	"ox1zgQJ2GGLO+LJclAveNUGEGl6Vi/KS2ZXUJYkqnw3Z5h8WOKFfKqjhZyQODMx09I5R8KarxSJXkCW0",
	"2c7eG92kg9XHyJcfSzA5lbBPB1/wekooiyxDkAdIaj5XMQ5NgzFuByMesELatZWDoc/C9Sk4uWucAYDT",
	"iwLi0PcyHKCGt0hDsEIawwU3szfJNrJFmWquKu/iGbKvlVqlag254t44dfhi6TztJPOcVkiT5wV1koRF",
	"VMnwGxRSKVT8/DSjx8KjMOA488fllwT+v7HBtVJCCot7dsEpZc9MUMCfFzwiWrQXk9wXG6cOF1Nz4OcU",
	"nMuzuvdISzXmlmaQcG6em7Se/eNlkD0ShpgGzFxqnfScQnG75OYsqYPi2JzShTOdiyekvTxS1jNXvJ43",
	"ZYaTgaivLl/mkAdEnpqnZTu1yOeBcunnqWJbc5y45/rom0Pi9JPyLG945Ez2CSn2v6nQ4pus25+0VYnz",
	"zUEsb8417OFMv37vlUwl95m6njbYIcVR/7DMX3OkuCnH07n40hQ50y/+k/7JTpgax7MkxV5TJ1gioSTJ",
	"mbU4zrRymuntDsOBOv7ClBs3kDi4IYjpc+zRHTCux78CAAD//07DMrD9DAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
