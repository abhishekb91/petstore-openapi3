// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	api "github.com/abhishekb91/petstore-openapi3/src/api"

	mock "github.com/stretchr/testify/mock"

	models "github.com/abhishekb91/petstore-openapi3/src/models"
)

// IDataAccessor is an autogenerated mock type for the IDataAccessor type
type IDataAccessor struct {
	mock.Mock
}

// AddPet provides a mock function with given fields: pet
func (_m *IDataAccessor) AddPet(pet *models.Pet) (*api.Pet, *api.Error) {
	ret := _m.Called(pet)

	var r0 *api.Pet
	if rf, ok := ret.Get(0).(func(*models.Pet) *api.Pet); ok {
		r0 = rf(pet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Pet)
		}
	}

	var r1 *api.Error
	if rf, ok := ret.Get(1).(func(*models.Pet) *api.Error); ok {
		r1 = rf(pet)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.Error)
		}
	}

	return r0, r1
}

// DeletePet provides a mock function with given fields: petId
func (_m *IDataAccessor) DeletePet(petId int64) *api.Error {
	ret := _m.Called(petId)

	var r0 *api.Error
	if rf, ok := ret.Get(0).(func(int64) *api.Error); ok {
		r0 = rf(petId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Error)
		}
	}

	return r0
}

// GetPetById provides a mock function with given fields: petId
func (_m *IDataAccessor) GetPetById(petId int64) (*api.Pet, *api.Error) {
	ret := _m.Called(petId)

	var r0 *api.Pet
	if rf, ok := ret.Get(0).(func(int64) *api.Pet); ok {
		r0 = rf(petId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Pet)
		}
	}

	var r1 *api.Error
	if rf, ok := ret.Get(1).(func(int64) *api.Error); ok {
		r1 = rf(petId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.Error)
		}
	}

	return r0, r1
}

// GetPets provides a mock function with given fields:
func (_m *IDataAccessor) GetPets() ([]*api.Pet, *api.Error) {
	ret := _m.Called()

	var r0 []*api.Pet
	if rf, ok := ret.Get(0).(func() []*api.Pet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Pet)
		}
	}

	var r1 *api.Error
	if rf, ok := ret.Get(1).(func() *api.Error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.Error)
		}
	}

	return r0, r1
}

// UpdatePet provides a mock function with given fields: petId, pet
func (_m *IDataAccessor) UpdatePet(petId int64, pet *models.Pet) *api.Error {
	ret := _m.Called(petId, pet)

	var r0 *api.Error
	if rf, ok := ret.Get(0).(func(int64, *models.Pet) *api.Error); ok {
		r0 = rf(petId, pet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Error)
		}
	}

	return r0
}
